// Script pour g√©n√©rer les ic√¥nes √† partir du SVG
// Usage: node generate-icons.js

const fs = require('fs');
const path = require('path');

console.log('\nüé® G√©n√©rateur d\'Ic√¥nes - Hospital App\n');

// V√©rifier si le fichier SVG existe
const svgPath = path.join(__dirname, 'icon-template.svg');

if (!fs.existsSync(svgPath)) {
  console.log('‚ùå Erreur: icon-template.svg n\'existe pas');
  console.log('\nüìã √âtapes pour cr√©er votre ic√¥ne:\n');
  console.log('1. Allez sur https://icon.kitchen');
  console.log('2. Cr√©ez une ic√¥ne avec un th√®me m√©dical (croix, st√©thoscope, etc.)');
  console.log('3. Couleur recommand√©e: #4A90E2 (bleu m√©dical)');
  console.log('4. T√©l√©chargez au format PNG 1024x1024');
  console.log('5. Placez le fichier dans le dossier assets/');
  console.log('6. Renommez en icon.png');
  console.log('\nüåê Alternatives:');
  console.log('   - Canva: https://canva.com (cr√©er un design 1024x1024)');
  console.log('   - Flaticon: https://flaticon.com (t√©l√©charger une ic√¥ne m√©dicale)');
  console.log('   - Figma: https://figma.com (design professionnel)\n');
  process.exit(1);
}

console.log('‚úÖ Fichier SVG trouv√©: icon-template.svg\n');

// V√©rifier si sharp est install√©
try {
  require.resolve('sharp');
} catch (e) {
  console.log('‚ùå Le package "sharp" n\'est pas install√©\n');
  console.log('üì¶ Installation requise:');
  console.log('   npm install sharp\n');
  console.log('‚ö†Ô∏è  Alternative sans sharp:');
  console.log('   1. Ouvrez icon-template.svg dans votre navigateur');
  console.log('   2. Faites un clic droit ‚Üí Enregistrer l\'image sous PNG');
  console.log('   3. Ou utilisez un service en ligne comme:');
  console.log('      - https://convertio.co/fr/svg-png/');
  console.log('      - https://cloudconvert.com/svg-to-png\n');
  process.exit(1);
}

const sharp = require('sharp');

// Cr√©er le dossier assets s'il n'existe pas
const assetsDir = path.join(__dirname, 'assets');
if (!fs.existsSync(assetsDir)) {
  fs.mkdirSync(assetsDir);
  console.log('üìÅ Dossier assets/ cr√©√©');
}

// Fonction pour convertir SVG en PNG
async function generateIcons() {
  try {
    console.log('üîÑ Conversion du SVG en PNG...\n');

    // Lire le fichier SVG
    const svgBuffer = fs.readFileSync(svgPath);

    // G√©n√©rer icon.png (1024x1024)
    await sharp(svgBuffer)
      .resize(1024, 1024)
      .png()
      .toFile(path.join(assetsDir, 'icon.png'));
    console.log('‚úÖ icon.png cr√©√© (1024x1024)');

    // G√©n√©rer adaptive-icon.png (1024x1024)
    await sharp(svgBuffer)
      .resize(1024, 1024)
      .png()
      .toFile(path.join(assetsDir, 'adaptive-icon.png'));
    console.log('‚úÖ adaptive-icon.png cr√©√© (1024x1024)');

    // G√©n√©rer favicon.png (48x48)
    await sharp(svgBuffer)
      .resize(48, 48)
      .png()
      .toFile(path.join(assetsDir, 'favicon.png'));
    console.log('‚úÖ favicon.png cr√©√© (48x48)');

    console.log('\nüéâ Toutes les ic√¥nes ont √©t√© g√©n√©r√©es avec succ√®s!');
    console.log('\nüìÅ Fichiers cr√©√©s:');
    console.log('   - assets/icon.png (1024x1024)');
    console.log('   - assets/adaptive-icon.png (1024x1024)');
    console.log('   - assets/favicon.png (48x48)');
    
    console.log('\nüöÄ Prochaines √©tapes:');
    console.log('   1. V√©rifiez les ic√¥nes dans le dossier assets/');
    console.log('   2. Testez avec: npm start');
    console.log('   3. Rebuild l\'APK: eas build -p android --profile preview\n');

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration:', error.message);
    console.log('\nüí° Solution alternative:');
    console.log('   1. Allez sur https://icon.kitchen');
    console.log('   2. Cr√©ez votre ic√¥ne');
    console.log('   3. T√©l√©chargez tous les formats');
    console.log('   4. Placez les fichiers dans assets/\n');
  }
}

// Lancer la g√©n√©ration
generateIcons();
